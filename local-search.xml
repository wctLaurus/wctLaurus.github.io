<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>拓扑排序及环检测</title>
    <link href="/2022/12/16/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%8F%8A%E7%8E%AF%E6%A3%80%E6%B5%8B/"/>
    <url>/2022/12/16/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%8F%8A%E7%8E%AF%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="一：图的遍历"><a href="#一：图的遍历" class="headerlink" title="一：图的遍历"></a>一：图的遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++">图的遍历有两种方式分别是dfs和bfs<br>首先dfs主要介绍和回溯算法的一些区别：<br>模板:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(...) <span class="hljs-keyword">return</span>;<br>    vis[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(遍历u能到达的点)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!vis[j]) <span class="hljs-built_in">dfs</span>(j);<br>    &#125;<br>    <span class="hljs-comment">//最后没有回溯的过程</span><br>&#125;<br><span class="hljs-number">1</span>:回溯算法大多数能抽象成一个树，也就是遍历可以从一个根节点开始进行遍历，但是图如果不是连通图则需要对每一个节点进行一次dfs,进行dfs之前要判断是否遍历过这个点，这样就可以保证整个遍历是一个<span class="hljs-built_in">o</span>(n+m)的过程<br><span class="hljs-built_in">o</span>(n+m)的原因:每次遍历相当于是找一个点的邻接点的过程耗时为<span class="hljs-built_in">o</span>(m)然后进入下一个点继续找邻接点总共n个点，由于不是嵌套所以<span class="hljs-built_in">o</span>(n+m)<br><span class="hljs-number">2</span>:搜索时有一条路原则，如果搜索时候没有回溯的话，在判断环的时候会出现错误判断<br>bfs目前没有注意点<br></code></pre></td></tr></table></figure><h2 id="二：dfs判环"><a href="#二：dfs判环" class="headerlink" title="二：dfs判环"></a>二：dfs判环</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">首先第一个问题就是如果我拿vis = <span class="hljs-number">1</span>判断这个点被遍历过了，如果在次出现就算环？不是的<br>例如 第一种写法dfs时不写 <span class="hljs-keyword">if</span>(!vis[j]) <span class="hljs-comment">//因为这样才能想办法找到成环的点</span><br>    <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span> <span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span> <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span><br>先走<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> 然后回溯，最后<span class="hljs-number">1</span> -&gt;<span class="hljs-number">3</span> 此时<span class="hljs-number">3</span>被走过了 这样也会判断成环实际没有<br>第二种写法写<span class="hljs-keyword">if</span>(!vis[j]) 那么遍历过的点永远都不会在遍历<br>我们正确的写法<br>vis=<span class="hljs-number">0</span>表示没被遍历 vis=<span class="hljs-number">1</span>表示正在遍历也就是这条路径没走完 vis = <span class="hljs-number">2</span>在回溯的时候做，表示这条路径不能被在走一次了<br>vis[u] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(vis[j] != <span class="hljs-number">2</span>) <span class="hljs-built_in">dfs</span>(j)<br>vis[u] = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h2 id="三：拓扑排序"><a href="#三：拓扑排序" class="headerlink" title="三：拓扑排序"></a>三：拓扑排序</h2><h4 id="拓扑排序定义"><a href="#拓扑排序定义" class="headerlink" title="拓扑排序定义"></a>拓扑排序定义</h4><p><strong>有向无环图一定满足拓扑排序，反过来说拓扑排序一定无环</strong></p><p><strong>将一个图所有顶点展开成一个线性序列对于任意x,y在拓扑序列中x 一定出现在y的前面,称一个序列为拓扑系列</strong></p><p><u>注意事项</u></p><p>进行拓扑排序并不一定要在拓扑排序的过程中进行操作，可以把拓扑排序数组拿出来求</p>]]></content>
    
    
    <categories>
      
      <category>算法系列</category>
      
      <category>图论</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
